{"ast":null,"code":"'use strict';\n\nvar convertExpression = require('./convert-expression');\n\nmodule.exports = function () {\n  function isValidExpression(expression, min, max) {\n    var options = expression.split(',');\n    var regexValidation = /^\\d+$|^\\*$|^\\*\\/\\d+$/;\n\n    for (var i = 0; i < options.length; i++) {\n      var option = options[i];\n      var optionAsInt = parseInt(options[i], 10);\n\n      if (optionAsInt < min || optionAsInt > max || !regexValidation.test(option)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function isInvalidSecond(expression) {\n    return !isValidExpression(expression, 0, 59);\n  }\n\n  function isInvalidMinute(expression) {\n    return !isValidExpression(expression, 0, 59);\n  }\n\n  function isInvalidHour(expression) {\n    return !isValidExpression(expression, 0, 23);\n  }\n\n  function isInvalidDayOfMonth(expression) {\n    return !isValidExpression(expression, 1, 31);\n  }\n\n  function isInvalidMonth(expression) {\n    return !isValidExpression(expression, 1, 12);\n  }\n\n  function isInvalidWeekDay(expression) {\n    return !isValidExpression(expression, 0, 7);\n  }\n\n  function validateFields(patterns, executablePatterns) {\n    if (isInvalidSecond(executablePatterns[0])) {\n      throw patterns[0] + ' is a invalid expression for second';\n    }\n\n    if (isInvalidMinute(executablePatterns[1])) {\n      throw patterns[1] + ' is a invalid expression for minute';\n    }\n\n    if (isInvalidHour(executablePatterns[2])) {\n      throw patterns[2] + ' is a invalid expression for hour';\n    }\n\n    if (isInvalidDayOfMonth(executablePatterns[3])) {\n      throw patterns[3] + ' is a invalid expression for day of month';\n    }\n\n    if (isInvalidMonth(executablePatterns[4])) {\n      throw patterns[4] + ' is a invalid expression for month';\n    }\n\n    if (isInvalidWeekDay(executablePatterns[5])) {\n      throw patterns[5] + ' is a invalid expression for week day';\n    }\n  }\n\n  function validate(pattern) {\n    if (typeof pattern !== 'string') {\n      throw 'pattern must be a string!';\n    }\n\n    var patterns = pattern.split(' ');\n    var executablePattern = convertExpression(pattern);\n    var executablePatterns = executablePattern.split(' ');\n\n    if (patterns.length === 5) {\n      patterns = ['0'].concat(patterns);\n    }\n\n    validateFields(patterns, executablePatterns);\n  }\n\n  return validate;\n}();","map":null,"metadata":{},"sourceType":"script"}