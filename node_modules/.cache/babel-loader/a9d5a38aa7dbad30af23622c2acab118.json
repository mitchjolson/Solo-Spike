{"ast":null,"code":"import _regeneratorRuntime from \"/Users/dandleton/Assignments/code-challenge-6-sagas/node_modules/@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/dandleton/Assignments/code-challenge-6-sagas/src/index.js\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootSaga),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(deleteAnimal),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getAnimals),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(postAnimal);\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App.js';\nimport registerServiceWorker from './registerServiceWorker';\nimport { createStore, combineReducers, applyMiddleware } from 'redux'; // Provider allows us to use redux within our react app\n\nimport { Provider } from 'react-redux';\nimport logger from 'redux-logger'; // Import saga middleware\n\nimport createSagaMiddleware from 'redux-saga';\nimport Axios from 'axios';\nimport { takeEvery, put } from 'redux-saga/effects';\nimport cron from 'node-cron';\n'second, minute, hour, ';\ncron.schedule('*/5 * * * * *', function () {\n  console.log('Running this task every 5 seconds');\n}); // Your saga should listen for the action type of `GET_ZOO_ANIMALS`\n\nfunction rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return takeEvery('GET_ZOO_ANIMALS', getAnimals);\n\n        case 2:\n          _context.next = 4;\n          return takeEvery('CREATE_ANIMAL', postAnimal);\n\n        case 4:\n          _context.next = 6;\n          return takeEvery('DELETE_ANIMAL', deleteAnimal);\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction deleteAnimal(action) {\n  return _regeneratorRuntime.wrap(function deleteAnimal$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return Axios.put(\"/zoo/\".concat(action.payload));\n\n        case 3:\n          _context2.next = 5;\n          return getAnimals();\n\n        case 5:\n          _context2.next = 10;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log('Error deleting animal', _context2.t0);\n\n        case 10:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction getAnimals() {\n  var response;\n  return _regeneratorRuntime.wrap(function getAnimals$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return Axios.get('/zoo');\n\n        case 3:\n          response = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: 'SET_ZOO_ANIMALS',\n            payload: response.data\n          });\n\n        case 6:\n          _context3.next = 11;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.log('Error retrieving list of animals', _context3.t0);\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction postAnimal(action) {\n  return _regeneratorRuntime.wrap(function postAnimal$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return Axios.post('/zoo', action.payload);\n\n        case 3:\n          _context4.next = 5;\n          return put({\n            type: 'GET_ZOO_ANIMALS'\n          });\n\n        case 5:\n          _context4.next = 10;\n          break;\n\n        case 7:\n          _context4.prev = 7;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.log('Error creating new animal', _context4.t0);\n\n        case 10:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 7]]);\n} // Create sagaMiddleware\n\n\nvar sagaMiddleware = createSagaMiddleware(); // Used to store class and number of unique animals in that class\n\nvar zooAnimals = function zooAnimals() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'SET_ZOO_ANIMALS':\n      return action.payload;\n\n    default:\n      return state;\n  }\n}; // Create one store that all components can use\n\n\nvar storeInstance = createStore(combineReducers({\n  zooAnimals: zooAnimals\n}), // Add sagaMiddleware to our store\napplyMiddleware(sagaMiddleware, logger)); // Pass rootSaga into our sagaMiddleware\n\nsagaMiddleware.run(rootSaga);\nReactDOM.render(React.createElement(Provider, {\n  store: storeInstance,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 81\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 81\n  },\n  __self: this\n})), document.getElementById('root'));\nregisterServiceWorker();","map":{"version":3,"sources":["/Users/dandleton/Assignments/code-challenge-6-sagas/src/index.js"],"names":["rootSaga","deleteAnimal","getAnimals","postAnimal","React","ReactDOM","App","registerServiceWorker","createStore","combineReducers","applyMiddleware","Provider","logger","createSagaMiddleware","Axios","takeEvery","put","cron","schedule","console","log","action","payload","get","response","type","data","post","sagaMiddleware","zooAnimals","state","storeInstance","run","render","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App.js';\nimport registerServiceWorker from './registerServiceWorker';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\n// Provider allows us to use redux within our react app\nimport { Provider } from 'react-redux';\nimport logger from 'redux-logger';\n// Import saga middleware\nimport createSagaMiddleware from 'redux-saga';\nimport Axios from 'axios';\nimport { takeEvery, put } from 'redux-saga/effects';\nimport cron from 'node-cron';\n\n\n'second, minute, hour, '\ncron.schedule('*/5 * * * * *', () => {\n    console.log('Running this task every 5 seconds');\n});\n\n// Your saga should listen for the action type of `GET_ZOO_ANIMALS`\nfunction* rootSaga() {\n    yield takeEvery('GET_ZOO_ANIMALS', getAnimals);\n    yield takeEvery('CREATE_ANIMAL', postAnimal);\n    yield takeEvery('DELETE_ANIMAL', deleteAnimal);\n}\n\nfunction* deleteAnimal(action) {\n    try {\n        yield Axios.put(`/zoo/${action.payload}`);\n        yield getAnimals();\n    } catch (error) {\n        console.log('Error deleting animal', error);\n    }\n}\n\nfunction* getAnimals() {\n    try {\n        const response = yield Axios.get('/zoo')\n        yield put ({type: 'SET_ZOO_ANIMALS', payload: response.data})\n    } catch (error) {\n        console.log('Error retrieving list of animals', error);\n    }\n}\n\nfunction* postAnimal(action){\n    try {\n        yield Axios.post('/zoo', action.payload)\n        yield put ({type:'GET_ZOO_ANIMALS'})\n    } catch (error) {\n        console.log('Error creating new animal', error)\n    }\n}\n\n// Create sagaMiddleware\nconst sagaMiddleware = createSagaMiddleware();\n\n// Used to store class and number of unique animals in that class\nconst zooAnimals = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_ZOO_ANIMALS':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\n// Create one store that all components can use\nconst storeInstance = createStore(\n    combineReducers({\n        zooAnimals,\n    }),\n    // Add sagaMiddleware to our store\n    applyMiddleware(sagaMiddleware, logger),\n);\n\n// Pass rootSaga into our sagaMiddleware\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(<Provider store={storeInstance}><App /></Provider>, \n    document.getElementById('root'));\nregisterServiceWorker();\n"]},"metadata":{},"sourceType":"module"}