{"ast":null,"code":"'use strict';\n\nvar convertExpression = require('./convert-expression');\n\nvar validatePattern = require('./pattern-validation');\n\nvar events = require('events');\n\nfunction matchPattern(pattern, value) {\n  if (pattern.indexOf(',') !== -1) {\n    var patterns = pattern.split(',');\n    return patterns.indexOf(value.toString()) !== -1;\n  }\n\n  return pattern === value.toString();\n}\n\nfunction mustRun(task, date) {\n  var runInSecond = matchPattern(task.expressions[0], date.getSeconds());\n  var runOnMinute = matchPattern(task.expressions[1], date.getMinutes());\n  var runOnHour = matchPattern(task.expressions[2], date.getHours());\n  var runOnDayOfMonth = matchPattern(task.expressions[3], date.getDate());\n  var runOnMonth = matchPattern(task.expressions[4], date.getMonth() + 1);\n  var runOnDayOfWeek = matchPattern(task.expressions[5], date.getDay());\n  var runOnDay = false;\n  var delta = task.initialPattern.length === 6 ? 0 : -1;\n\n  if (task.initialPattern[3 + delta] === '*') {\n    runOnDay = runOnDayOfWeek;\n  } else if (task.initialPattern[5 + delta] === '*') {\n    runOnDay = runOnDayOfMonth;\n  } else {\n    runOnDay = runOnDayOfMonth || runOnDayOfWeek;\n  }\n\n  return runInSecond && runOnMinute && runOnHour && runOnDay && runOnMonth;\n}\n\nfunction Task(pattern, execution) {\n  var _this = this;\n\n  validatePattern(pattern);\n  this.initialPattern = pattern.split(' ');\n  this.pattern = convertExpression(pattern);\n  this.execution = execution;\n  this.expressions = this.pattern.split(' ');\n  events.EventEmitter.call(this);\n\n  this.update = function (date) {\n    if (mustRun(_this, date)) {\n      new Promise(function (resolve, reject) {\n        _this.emit('started', _this);\n\n        var ex = _this.execution();\n\n        if (ex instanceof Promise) {\n          ex.then(resolve).catch(reject);\n        } else {\n          resolve();\n        }\n      }).then(function () {\n        _this.emit('done', _this);\n      }).catch(function (error) {\n        console.error(error);\n\n        _this.emit('failed', error);\n      });\n    }\n  };\n}\n\nTask.prototype = events.EventEmitter.prototype;\nmodule.exports = Task;","map":null,"metadata":{},"sourceType":"script"}