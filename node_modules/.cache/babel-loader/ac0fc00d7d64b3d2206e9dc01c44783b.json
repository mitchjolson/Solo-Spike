{"ast":null,"code":"'use strict';\n\nvar monthNamesConversion = require('./month-names-conversion');\n\nvar weekDayNamesConversion = require('./week-day-names-conversion');\n\nvar convertAsterisksToRanges = require('./asterisk-to-range-conversion');\n\nvar convertRanges = require('./range-conversion');\n\nvar convertSteps = require('./step-values-conversion');\n\nmodule.exports = function () {\n  function appendSeccondExpression(expressions) {\n    if (expressions.length === 5) {\n      return ['0'].concat(expressions);\n    }\n\n    return expressions;\n  }\n\n  function removeSpaces(str) {\n    return str.replace(/\\s{2,}/g, ' ').trim();\n  } // Function that takes care of normalization.\n\n\n  function normalizeIntegers(expressions) {\n    for (var i = 0; i < expressions.length; i++) {\n      var numbers = expressions[i].split(',');\n\n      for (var j = 0; j < numbers.length; j++) {\n        numbers[j] = parseInt(numbers[j]);\n      }\n\n      expressions[i] = numbers;\n    }\n\n    return expressions;\n  }\n  /*\n   * The node-cron core allows only numbers (including multiple numbers e.g 1,2).\n   * This module is going to translate the month names, week day names and ranges\n   * to integers relatives.\n   *\n   * Month names example:\n   *  - expression 0 1 1 January,Sep *\n   *  - Will be translated to 0 1 1 1,9 *\n   *\n   * Week day names example:\n   *  - expression 0 1 1 2 Monday,Sat\n   *  - Will be translated to 0 1 1 1,5 *\n   *\n   * Ranges example:\n   *  - expression 1-5 * * * *\n   *  - Will be translated to 1,2,3,4,5 * * * *\n   */\n\n\n  function interprete(expression) {\n    var expressions = removeSpaces(expression).split(' ');\n    expressions = appendSeccondExpression(expressions);\n    expressions[4] = monthNamesConversion(expressions[4]);\n    expressions[5] = weekDayNamesConversion(expressions[5]);\n    expressions = convertAsterisksToRanges(expressions);\n    expressions = convertRanges(expressions);\n    expressions = convertSteps(expressions);\n    expressions = normalizeIntegers(expressions);\n    return expressions.join(' ');\n  }\n\n  return interprete;\n}();","map":null,"metadata":{},"sourceType":"script"}