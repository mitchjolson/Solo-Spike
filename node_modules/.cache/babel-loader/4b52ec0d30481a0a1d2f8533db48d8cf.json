{"ast":null,"code":"'use strict';\n\nvar tzOffset = require('tz-offset');\n/**\n* Creates a new scheduled task.\n*\n* @param {Task} task - task to schedule.\n* @param {*} options - task options.\n*/\n\n\nfunction ScheduledTask(task, options) {\n  var _this = this;\n\n  var timezone = options.timezone;\n  /**\n  * Starts updating the task.\n  *\n  * @returns {ScheduledTask} instance of this task.\n  */\n\n  this.start = function () {\n    _this.status = 'scheduled';\n\n    if (_this.task && !_this.tick) {\n      _this.tick = setTimeout(_this.task, 1000 - new Date().getMilliseconds() + 1);\n    }\n\n    return _this;\n  };\n  /**\n  * Stops updating the task.\n  *\n  * @returns {ScheduledTask} instance of this task.\n  */\n\n\n  this.stop = function () {\n    _this.status = 'stoped';\n\n    if (_this.tick) {\n      clearTimeout(_this.tick);\n      _this.tick = null;\n    }\n\n    return _this;\n  };\n  /**\n  * Returns the current task status.\n  *\n  * @returns {string} current task status.\n  * The return may be:\n  * - scheduled: when a task is scheduled and waiting to be executed.\n  * - running: the task status while the task is executing. \n  * - stoped: when the task is stoped.\n  * - destroyed: whe the task is destroyed, in that status the task cannot be re-started.\n  * - failed: a task is maker as failed when the previous execution fails.\n  */\n\n\n  this.getStatus = function () {\n    return _this.status;\n  };\n  /**\n  * Destroys the scheduled task.\n  */\n\n\n  this.destroy = function () {\n    _this.stop();\n\n    _this.status = 'destroyed';\n    _this.task = null;\n  };\n\n  task.on('started', function () {\n    _this.status = 'running';\n  });\n  task.on('done', function () {\n    _this.status = 'scheduled';\n  });\n  task.on('failed', function () {\n    _this.status = 'failed';\n  });\n\n  this.task = function () {\n    var date = new Date();\n\n    if (timezone) {\n      date = tzOffset.timeAt(date, timezone);\n    }\n\n    _this.tick = setTimeout(_this.task, 1000 - date.getMilliseconds() + 1);\n    task.update(date);\n  };\n\n  this.tick = null;\n\n  if (options.scheduled !== false) {\n    this.start();\n  }\n}\n\nmodule.exports = ScheduledTask;","map":null,"metadata":{},"sourceType":"script"}